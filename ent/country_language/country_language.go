// Code generated by entc, DO NOT EDIT.

package country_language

const (
	// Label holds the string label denoting the country_language type in the database.
	Label = "country_language"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCountryCode holds the string denoting the country_code field in the database.
	FieldCountryCode = "country_code"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldIsOfficial holds the string denoting the is_official field in the database.
	FieldIsOfficial = "is_official"
	// FieldPercentage holds the string denoting the percentage field in the database.
	FieldPercentage = "percentage"
	// EdgeCountry holds the string denoting the country edge name in mutations.
	EdgeCountry = "country"
	// CountryFieldID holds the string denoting the ID field of the Country.
	CountryFieldID = "code"
	// Table holds the table name of the country_language in the database.
	Table = "country_language"
	// CountryTable is the table that holds the country relation/edge.
	CountryTable = "country_language"
	// CountryInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryInverseTable = "country"
	// CountryColumn is the table column denoting the country relation/edge.
	CountryColumn = "country_language"
)

// Columns holds all SQL columns for country_language fields.
var Columns = []string{
	FieldID,
	FieldCountryCode,
	FieldLanguage,
	FieldIsOfficial,
	FieldPercentage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "country_language"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"country_language",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
