// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Faroukhamadi/northwind-api/ent/city"
	"github.com/Faroukhamadi/northwind-api/ent/country"
	"github.com/Faroukhamadi/northwind-api/ent/country_language"
	"github.com/Faroukhamadi/northwind-api/ent/predicate"
)

// CountryUpdate is the builder for updating Country entities.
type CountryUpdate struct {
	config
	hooks    []Hook
	mutation *CountryMutation
}

// Where appends a list predicates to the CountryUpdate builder.
func (cu *CountryUpdate) Where(ps ...predicate.Country) *CountryUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CountryUpdate) SetName(s string) *CountryUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetRegion sets the "region" field.
func (cu *CountryUpdate) SetRegion(s string) *CountryUpdate {
	cu.mutation.SetRegion(s)
	return cu
}

// SetSurfaceArea sets the "surface_area" field.
func (cu *CountryUpdate) SetSurfaceArea(f float64) *CountryUpdate {
	cu.mutation.ResetSurfaceArea()
	cu.mutation.SetSurfaceArea(f)
	return cu
}

// AddSurfaceArea adds f to the "surface_area" field.
func (cu *CountryUpdate) AddSurfaceArea(f float64) *CountryUpdate {
	cu.mutation.AddSurfaceArea(f)
	return cu
}

// SetIndepYear sets the "indep_year" field.
func (cu *CountryUpdate) SetIndepYear(i int16) *CountryUpdate {
	cu.mutation.ResetIndepYear()
	cu.mutation.SetIndepYear(i)
	return cu
}

// AddIndepYear adds i to the "indep_year" field.
func (cu *CountryUpdate) AddIndepYear(i int16) *CountryUpdate {
	cu.mutation.AddIndepYear(i)
	return cu
}

// SetPopulation sets the "population" field.
func (cu *CountryUpdate) SetPopulation(i int) *CountryUpdate {
	cu.mutation.ResetPopulation()
	cu.mutation.SetPopulation(i)
	return cu
}

// AddPopulation adds i to the "population" field.
func (cu *CountryUpdate) AddPopulation(i int) *CountryUpdate {
	cu.mutation.AddPopulation(i)
	return cu
}

// SetLifeExpectancy sets the "life_expectancy" field.
func (cu *CountryUpdate) SetLifeExpectancy(f float64) *CountryUpdate {
	cu.mutation.ResetLifeExpectancy()
	cu.mutation.SetLifeExpectancy(f)
	return cu
}

// AddLifeExpectancy adds f to the "life_expectancy" field.
func (cu *CountryUpdate) AddLifeExpectancy(f float64) *CountryUpdate {
	cu.mutation.AddLifeExpectancy(f)
	return cu
}

// SetGnp sets the "gnp" field.
func (cu *CountryUpdate) SetGnp(f float64) *CountryUpdate {
	cu.mutation.ResetGnp()
	cu.mutation.SetGnp(f)
	return cu
}

// AddGnp adds f to the "gnp" field.
func (cu *CountryUpdate) AddGnp(f float64) *CountryUpdate {
	cu.mutation.AddGnp(f)
	return cu
}

// SetGnpOld sets the "gnp_old" field.
func (cu *CountryUpdate) SetGnpOld(f float64) *CountryUpdate {
	cu.mutation.ResetGnpOld()
	cu.mutation.SetGnpOld(f)
	return cu
}

// AddGnpOld adds f to the "gnp_old" field.
func (cu *CountryUpdate) AddGnpOld(f float64) *CountryUpdate {
	cu.mutation.AddGnpOld(f)
	return cu
}

// SetLocalName sets the "local_name" field.
func (cu *CountryUpdate) SetLocalName(s string) *CountryUpdate {
	cu.mutation.SetLocalName(s)
	return cu
}

// SetGovernmentForm sets the "government_form" field.
func (cu *CountryUpdate) SetGovernmentForm(s string) *CountryUpdate {
	cu.mutation.SetGovernmentForm(s)
	return cu
}

// SetHeadOfState sets the "head_of_state" field.
func (cu *CountryUpdate) SetHeadOfState(s string) *CountryUpdate {
	cu.mutation.SetHeadOfState(s)
	return cu
}

// SetNillableHeadOfState sets the "head_of_state" field if the given value is not nil.
func (cu *CountryUpdate) SetNillableHeadOfState(s *string) *CountryUpdate {
	if s != nil {
		cu.SetHeadOfState(*s)
	}
	return cu
}

// ClearHeadOfState clears the value of the "head_of_state" field.
func (cu *CountryUpdate) ClearHeadOfState() *CountryUpdate {
	cu.mutation.ClearHeadOfState()
	return cu
}

// SetCode2 sets the "code2" field.
func (cu *CountryUpdate) SetCode2(s string) *CountryUpdate {
	cu.mutation.SetCode2(s)
	return cu
}

// SetCapitalID sets the "capital" edge to the City entity by ID.
func (cu *CountryUpdate) SetCapitalID(id int) *CountryUpdate {
	cu.mutation.SetCapitalID(id)
	return cu
}

// SetNillableCapitalID sets the "capital" edge to the City entity by ID if the given value is not nil.
func (cu *CountryUpdate) SetNillableCapitalID(id *int) *CountryUpdate {
	if id != nil {
		cu = cu.SetCapitalID(*id)
	}
	return cu
}

// SetCapital sets the "capital" edge to the City entity.
func (cu *CountryUpdate) SetCapital(c *City) *CountryUpdate {
	return cu.SetCapitalID(c.ID)
}

// SetLanguageID sets the "language" edge to the Country_language entity by ID.
func (cu *CountryUpdate) SetLanguageID(id int) *CountryUpdate {
	cu.mutation.SetLanguageID(id)
	return cu
}

// SetNillableLanguageID sets the "language" edge to the Country_language entity by ID if the given value is not nil.
func (cu *CountryUpdate) SetNillableLanguageID(id *int) *CountryUpdate {
	if id != nil {
		cu = cu.SetLanguageID(*id)
	}
	return cu
}

// SetLanguage sets the "language" edge to the Country_language entity.
func (cu *CountryUpdate) SetLanguage(c *Country_language) *CountryUpdate {
	return cu.SetLanguageID(c.ID)
}

// Mutation returns the CountryMutation object of the builder.
func (cu *CountryUpdate) Mutation() *CountryMutation {
	return cu.mutation
}

// ClearCapital clears the "capital" edge to the City entity.
func (cu *CountryUpdate) ClearCapital() *CountryUpdate {
	cu.mutation.ClearCapital()
	return cu
}

// ClearLanguage clears the "language" edge to the Country_language entity.
func (cu *CountryUpdate) ClearLanguage() *CountryUpdate {
	cu.mutation.ClearLanguage()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CountryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CountryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CountryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CountryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CountryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CountryUpdate) check() error {
	if v, ok := cu.mutation.Code2(); ok {
		if err := country.Code2Validator(v); err != nil {
			return &ValidationError{Name: "code2", err: fmt.Errorf(`ent: validator failed for field "Country.code2": %w`, err)}
		}
	}
	return nil
}

func (cu *CountryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   country.Table,
			Columns: country.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: country.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldName,
		})
	}
	if value, ok := cu.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldRegion,
		})
	}
	if value, ok := cu.mutation.SurfaceArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldSurfaceArea,
		})
	}
	if value, ok := cu.mutation.AddedSurfaceArea(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldSurfaceArea,
		})
	}
	if value, ok := cu.mutation.IndepYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: country.FieldIndepYear,
		})
	}
	if value, ok := cu.mutation.AddedIndepYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: country.FieldIndepYear,
		})
	}
	if value, ok := cu.mutation.Population(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: country.FieldPopulation,
		})
	}
	if value, ok := cu.mutation.AddedPopulation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: country.FieldPopulation,
		})
	}
	if value, ok := cu.mutation.LifeExpectancy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldLifeExpectancy,
		})
	}
	if value, ok := cu.mutation.AddedLifeExpectancy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldLifeExpectancy,
		})
	}
	if value, ok := cu.mutation.Gnp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldGnp,
		})
	}
	if value, ok := cu.mutation.AddedGnp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldGnp,
		})
	}
	if value, ok := cu.mutation.GnpOld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldGnpOld,
		})
	}
	if value, ok := cu.mutation.AddedGnpOld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldGnpOld,
		})
	}
	if value, ok := cu.mutation.LocalName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldLocalName,
		})
	}
	if value, ok := cu.mutation.GovernmentForm(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldGovernmentForm,
		})
	}
	if value, ok := cu.mutation.HeadOfState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldHeadOfState,
		})
	}
	if cu.mutation.HeadOfStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: country.FieldHeadOfState,
		})
	}
	if value, ok := cu.mutation.Code2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldCode2,
		})
	}
	if cu.mutation.CapitalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   country.CapitalTable,
			Columns: []string{country.CapitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CapitalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   country.CapitalTable,
			Columns: []string{country.CapitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   country.LanguageTable,
			Columns: []string{country.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country_language.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   country.LanguageTable,
			Columns: []string{country.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country_language.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CountryUpdateOne is the builder for updating a single Country entity.
type CountryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CountryMutation
}

// SetName sets the "name" field.
func (cuo *CountryUpdateOne) SetName(s string) *CountryUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetRegion sets the "region" field.
func (cuo *CountryUpdateOne) SetRegion(s string) *CountryUpdateOne {
	cuo.mutation.SetRegion(s)
	return cuo
}

// SetSurfaceArea sets the "surface_area" field.
func (cuo *CountryUpdateOne) SetSurfaceArea(f float64) *CountryUpdateOne {
	cuo.mutation.ResetSurfaceArea()
	cuo.mutation.SetSurfaceArea(f)
	return cuo
}

// AddSurfaceArea adds f to the "surface_area" field.
func (cuo *CountryUpdateOne) AddSurfaceArea(f float64) *CountryUpdateOne {
	cuo.mutation.AddSurfaceArea(f)
	return cuo
}

// SetIndepYear sets the "indep_year" field.
func (cuo *CountryUpdateOne) SetIndepYear(i int16) *CountryUpdateOne {
	cuo.mutation.ResetIndepYear()
	cuo.mutation.SetIndepYear(i)
	return cuo
}

// AddIndepYear adds i to the "indep_year" field.
func (cuo *CountryUpdateOne) AddIndepYear(i int16) *CountryUpdateOne {
	cuo.mutation.AddIndepYear(i)
	return cuo
}

// SetPopulation sets the "population" field.
func (cuo *CountryUpdateOne) SetPopulation(i int) *CountryUpdateOne {
	cuo.mutation.ResetPopulation()
	cuo.mutation.SetPopulation(i)
	return cuo
}

// AddPopulation adds i to the "population" field.
func (cuo *CountryUpdateOne) AddPopulation(i int) *CountryUpdateOne {
	cuo.mutation.AddPopulation(i)
	return cuo
}

// SetLifeExpectancy sets the "life_expectancy" field.
func (cuo *CountryUpdateOne) SetLifeExpectancy(f float64) *CountryUpdateOne {
	cuo.mutation.ResetLifeExpectancy()
	cuo.mutation.SetLifeExpectancy(f)
	return cuo
}

// AddLifeExpectancy adds f to the "life_expectancy" field.
func (cuo *CountryUpdateOne) AddLifeExpectancy(f float64) *CountryUpdateOne {
	cuo.mutation.AddLifeExpectancy(f)
	return cuo
}

// SetGnp sets the "gnp" field.
func (cuo *CountryUpdateOne) SetGnp(f float64) *CountryUpdateOne {
	cuo.mutation.ResetGnp()
	cuo.mutation.SetGnp(f)
	return cuo
}

// AddGnp adds f to the "gnp" field.
func (cuo *CountryUpdateOne) AddGnp(f float64) *CountryUpdateOne {
	cuo.mutation.AddGnp(f)
	return cuo
}

// SetGnpOld sets the "gnp_old" field.
func (cuo *CountryUpdateOne) SetGnpOld(f float64) *CountryUpdateOne {
	cuo.mutation.ResetGnpOld()
	cuo.mutation.SetGnpOld(f)
	return cuo
}

// AddGnpOld adds f to the "gnp_old" field.
func (cuo *CountryUpdateOne) AddGnpOld(f float64) *CountryUpdateOne {
	cuo.mutation.AddGnpOld(f)
	return cuo
}

// SetLocalName sets the "local_name" field.
func (cuo *CountryUpdateOne) SetLocalName(s string) *CountryUpdateOne {
	cuo.mutation.SetLocalName(s)
	return cuo
}

// SetGovernmentForm sets the "government_form" field.
func (cuo *CountryUpdateOne) SetGovernmentForm(s string) *CountryUpdateOne {
	cuo.mutation.SetGovernmentForm(s)
	return cuo
}

// SetHeadOfState sets the "head_of_state" field.
func (cuo *CountryUpdateOne) SetHeadOfState(s string) *CountryUpdateOne {
	cuo.mutation.SetHeadOfState(s)
	return cuo
}

// SetNillableHeadOfState sets the "head_of_state" field if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableHeadOfState(s *string) *CountryUpdateOne {
	if s != nil {
		cuo.SetHeadOfState(*s)
	}
	return cuo
}

// ClearHeadOfState clears the value of the "head_of_state" field.
func (cuo *CountryUpdateOne) ClearHeadOfState() *CountryUpdateOne {
	cuo.mutation.ClearHeadOfState()
	return cuo
}

// SetCode2 sets the "code2" field.
func (cuo *CountryUpdateOne) SetCode2(s string) *CountryUpdateOne {
	cuo.mutation.SetCode2(s)
	return cuo
}

// SetCapitalID sets the "capital" edge to the City entity by ID.
func (cuo *CountryUpdateOne) SetCapitalID(id int) *CountryUpdateOne {
	cuo.mutation.SetCapitalID(id)
	return cuo
}

// SetNillableCapitalID sets the "capital" edge to the City entity by ID if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableCapitalID(id *int) *CountryUpdateOne {
	if id != nil {
		cuo = cuo.SetCapitalID(*id)
	}
	return cuo
}

// SetCapital sets the "capital" edge to the City entity.
func (cuo *CountryUpdateOne) SetCapital(c *City) *CountryUpdateOne {
	return cuo.SetCapitalID(c.ID)
}

// SetLanguageID sets the "language" edge to the Country_language entity by ID.
func (cuo *CountryUpdateOne) SetLanguageID(id int) *CountryUpdateOne {
	cuo.mutation.SetLanguageID(id)
	return cuo
}

// SetNillableLanguageID sets the "language" edge to the Country_language entity by ID if the given value is not nil.
func (cuo *CountryUpdateOne) SetNillableLanguageID(id *int) *CountryUpdateOne {
	if id != nil {
		cuo = cuo.SetLanguageID(*id)
	}
	return cuo
}

// SetLanguage sets the "language" edge to the Country_language entity.
func (cuo *CountryUpdateOne) SetLanguage(c *Country_language) *CountryUpdateOne {
	return cuo.SetLanguageID(c.ID)
}

// Mutation returns the CountryMutation object of the builder.
func (cuo *CountryUpdateOne) Mutation() *CountryMutation {
	return cuo.mutation
}

// ClearCapital clears the "capital" edge to the City entity.
func (cuo *CountryUpdateOne) ClearCapital() *CountryUpdateOne {
	cuo.mutation.ClearCapital()
	return cuo
}

// ClearLanguage clears the "language" edge to the Country_language entity.
func (cuo *CountryUpdateOne) ClearLanguage() *CountryUpdateOne {
	cuo.mutation.ClearLanguage()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CountryUpdateOne) Select(field string, fields ...string) *CountryUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Country entity.
func (cuo *CountryUpdateOne) Save(ctx context.Context) (*Country, error) {
	var (
		err  error
		node *Country
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CountryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CountryUpdateOne) SaveX(ctx context.Context) *Country {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CountryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CountryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CountryUpdateOne) check() error {
	if v, ok := cuo.mutation.Code2(); ok {
		if err := country.Code2Validator(v); err != nil {
			return &ValidationError{Name: "code2", err: fmt.Errorf(`ent: validator failed for field "Country.code2": %w`, err)}
		}
	}
	return nil
}

func (cuo *CountryUpdateOne) sqlSave(ctx context.Context) (_node *Country, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   country.Table,
			Columns: country.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: country.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Country.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, country.FieldID)
		for _, f := range fields {
			if !country.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != country.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldName,
		})
	}
	if value, ok := cuo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldRegion,
		})
	}
	if value, ok := cuo.mutation.SurfaceArea(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldSurfaceArea,
		})
	}
	if value, ok := cuo.mutation.AddedSurfaceArea(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldSurfaceArea,
		})
	}
	if value, ok := cuo.mutation.IndepYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: country.FieldIndepYear,
		})
	}
	if value, ok := cuo.mutation.AddedIndepYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: country.FieldIndepYear,
		})
	}
	if value, ok := cuo.mutation.Population(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: country.FieldPopulation,
		})
	}
	if value, ok := cuo.mutation.AddedPopulation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: country.FieldPopulation,
		})
	}
	if value, ok := cuo.mutation.LifeExpectancy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldLifeExpectancy,
		})
	}
	if value, ok := cuo.mutation.AddedLifeExpectancy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldLifeExpectancy,
		})
	}
	if value, ok := cuo.mutation.Gnp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldGnp,
		})
	}
	if value, ok := cuo.mutation.AddedGnp(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldGnp,
		})
	}
	if value, ok := cuo.mutation.GnpOld(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldGnpOld,
		})
	}
	if value, ok := cuo.mutation.AddedGnpOld(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldGnpOld,
		})
	}
	if value, ok := cuo.mutation.LocalName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldLocalName,
		})
	}
	if value, ok := cuo.mutation.GovernmentForm(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldGovernmentForm,
		})
	}
	if value, ok := cuo.mutation.HeadOfState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldHeadOfState,
		})
	}
	if cuo.mutation.HeadOfStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: country.FieldHeadOfState,
		})
	}
	if value, ok := cuo.mutation.Code2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldCode2,
		})
	}
	if cuo.mutation.CapitalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   country.CapitalTable,
			Columns: []string{country.CapitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CapitalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   country.CapitalTable,
			Columns: []string{country.CapitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   country.LanguageTable,
			Columns: []string{country.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country_language.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   country.LanguageTable,
			Columns: []string{country.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country_language.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Country{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{country.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
