// Code generated by entc, DO NOT EDIT.

package country

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Faroukhamadi/northwind-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// SurfaceArea applies equality check predicate on the "surface_area" field. It's identical to SurfaceAreaEQ.
func SurfaceArea(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSurfaceArea), v))
	})
}

// IndepYear applies equality check predicate on the "indep_year" field. It's identical to IndepYearEQ.
func IndepYear(v int16) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndepYear), v))
	})
}

// Population applies equality check predicate on the "population" field. It's identical to PopulationEQ.
func Population(v int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulation), v))
	})
}

// LifeExpectancy applies equality check predicate on the "life_expectancy" field. It's identical to LifeExpectancyEQ.
func LifeExpectancy(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLifeExpectancy), v))
	})
}

// Gnp applies equality check predicate on the "gnp" field. It's identical to GnpEQ.
func Gnp(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGnp), v))
	})
}

// GnpOld applies equality check predicate on the "gnp_old" field. It's identical to GnpOldEQ.
func GnpOld(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGnpOld), v))
	})
}

// LocalName applies equality check predicate on the "local_name" field. It's identical to LocalNameEQ.
func LocalName(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocalName), v))
	})
}

// GovernmentForm applies equality check predicate on the "government_form" field. It's identical to GovernmentFormEQ.
func GovernmentForm(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGovernmentForm), v))
	})
}

// HeadOfState applies equality check predicate on the "head_of_state" field. It's identical to HeadOfStateEQ.
func HeadOfState(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeadOfState), v))
	})
}

// Code2 applies equality check predicate on the "code2" field. It's identical to Code2EQ.
func Code2(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode2), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRegion), v))
	})
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRegion), v))
	})
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRegion), v...))
	})
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRegion), v...))
	})
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRegion), v))
	})
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRegion), v))
	})
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRegion), v))
	})
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRegion), v))
	})
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRegion), v))
	})
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRegion), v))
	})
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRegion), v))
	})
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRegion), v))
	})
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRegion), v))
	})
}

// SurfaceAreaEQ applies the EQ predicate on the "surface_area" field.
func SurfaceAreaEQ(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSurfaceArea), v))
	})
}

// SurfaceAreaNEQ applies the NEQ predicate on the "surface_area" field.
func SurfaceAreaNEQ(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSurfaceArea), v))
	})
}

// SurfaceAreaIn applies the In predicate on the "surface_area" field.
func SurfaceAreaIn(vs ...float64) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSurfaceArea), v...))
	})
}

// SurfaceAreaNotIn applies the NotIn predicate on the "surface_area" field.
func SurfaceAreaNotIn(vs ...float64) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSurfaceArea), v...))
	})
}

// SurfaceAreaGT applies the GT predicate on the "surface_area" field.
func SurfaceAreaGT(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSurfaceArea), v))
	})
}

// SurfaceAreaGTE applies the GTE predicate on the "surface_area" field.
func SurfaceAreaGTE(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSurfaceArea), v))
	})
}

// SurfaceAreaLT applies the LT predicate on the "surface_area" field.
func SurfaceAreaLT(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSurfaceArea), v))
	})
}

// SurfaceAreaLTE applies the LTE predicate on the "surface_area" field.
func SurfaceAreaLTE(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSurfaceArea), v))
	})
}

// IndepYearEQ applies the EQ predicate on the "indep_year" field.
func IndepYearEQ(v int16) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndepYear), v))
	})
}

// IndepYearNEQ applies the NEQ predicate on the "indep_year" field.
func IndepYearNEQ(v int16) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIndepYear), v))
	})
}

// IndepYearIn applies the In predicate on the "indep_year" field.
func IndepYearIn(vs ...int16) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIndepYear), v...))
	})
}

// IndepYearNotIn applies the NotIn predicate on the "indep_year" field.
func IndepYearNotIn(vs ...int16) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIndepYear), v...))
	})
}

// IndepYearGT applies the GT predicate on the "indep_year" field.
func IndepYearGT(v int16) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIndepYear), v))
	})
}

// IndepYearGTE applies the GTE predicate on the "indep_year" field.
func IndepYearGTE(v int16) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIndepYear), v))
	})
}

// IndepYearLT applies the LT predicate on the "indep_year" field.
func IndepYearLT(v int16) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIndepYear), v))
	})
}

// IndepYearLTE applies the LTE predicate on the "indep_year" field.
func IndepYearLTE(v int16) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIndepYear), v))
	})
}

// PopulationEQ applies the EQ predicate on the "population" field.
func PopulationEQ(v int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPopulation), v))
	})
}

// PopulationNEQ applies the NEQ predicate on the "population" field.
func PopulationNEQ(v int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPopulation), v))
	})
}

// PopulationIn applies the In predicate on the "population" field.
func PopulationIn(vs ...int) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPopulation), v...))
	})
}

// PopulationNotIn applies the NotIn predicate on the "population" field.
func PopulationNotIn(vs ...int) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPopulation), v...))
	})
}

// PopulationGT applies the GT predicate on the "population" field.
func PopulationGT(v int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPopulation), v))
	})
}

// PopulationGTE applies the GTE predicate on the "population" field.
func PopulationGTE(v int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPopulation), v))
	})
}

// PopulationLT applies the LT predicate on the "population" field.
func PopulationLT(v int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPopulation), v))
	})
}

// PopulationLTE applies the LTE predicate on the "population" field.
func PopulationLTE(v int) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPopulation), v))
	})
}

// LifeExpectancyEQ applies the EQ predicate on the "life_expectancy" field.
func LifeExpectancyEQ(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLifeExpectancy), v))
	})
}

// LifeExpectancyNEQ applies the NEQ predicate on the "life_expectancy" field.
func LifeExpectancyNEQ(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLifeExpectancy), v))
	})
}

// LifeExpectancyIn applies the In predicate on the "life_expectancy" field.
func LifeExpectancyIn(vs ...float64) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLifeExpectancy), v...))
	})
}

// LifeExpectancyNotIn applies the NotIn predicate on the "life_expectancy" field.
func LifeExpectancyNotIn(vs ...float64) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLifeExpectancy), v...))
	})
}

// LifeExpectancyGT applies the GT predicate on the "life_expectancy" field.
func LifeExpectancyGT(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLifeExpectancy), v))
	})
}

// LifeExpectancyGTE applies the GTE predicate on the "life_expectancy" field.
func LifeExpectancyGTE(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLifeExpectancy), v))
	})
}

// LifeExpectancyLT applies the LT predicate on the "life_expectancy" field.
func LifeExpectancyLT(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLifeExpectancy), v))
	})
}

// LifeExpectancyLTE applies the LTE predicate on the "life_expectancy" field.
func LifeExpectancyLTE(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLifeExpectancy), v))
	})
}

// GnpEQ applies the EQ predicate on the "gnp" field.
func GnpEQ(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGnp), v))
	})
}

// GnpNEQ applies the NEQ predicate on the "gnp" field.
func GnpNEQ(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGnp), v))
	})
}

// GnpIn applies the In predicate on the "gnp" field.
func GnpIn(vs ...float64) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGnp), v...))
	})
}

// GnpNotIn applies the NotIn predicate on the "gnp" field.
func GnpNotIn(vs ...float64) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGnp), v...))
	})
}

// GnpGT applies the GT predicate on the "gnp" field.
func GnpGT(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGnp), v))
	})
}

// GnpGTE applies the GTE predicate on the "gnp" field.
func GnpGTE(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGnp), v))
	})
}

// GnpLT applies the LT predicate on the "gnp" field.
func GnpLT(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGnp), v))
	})
}

// GnpLTE applies the LTE predicate on the "gnp" field.
func GnpLTE(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGnp), v))
	})
}

// GnpOldEQ applies the EQ predicate on the "gnp_old" field.
func GnpOldEQ(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGnpOld), v))
	})
}

// GnpOldNEQ applies the NEQ predicate on the "gnp_old" field.
func GnpOldNEQ(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGnpOld), v))
	})
}

// GnpOldIn applies the In predicate on the "gnp_old" field.
func GnpOldIn(vs ...float64) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGnpOld), v...))
	})
}

// GnpOldNotIn applies the NotIn predicate on the "gnp_old" field.
func GnpOldNotIn(vs ...float64) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGnpOld), v...))
	})
}

// GnpOldGT applies the GT predicate on the "gnp_old" field.
func GnpOldGT(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGnpOld), v))
	})
}

// GnpOldGTE applies the GTE predicate on the "gnp_old" field.
func GnpOldGTE(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGnpOld), v))
	})
}

// GnpOldLT applies the LT predicate on the "gnp_old" field.
func GnpOldLT(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGnpOld), v))
	})
}

// GnpOldLTE applies the LTE predicate on the "gnp_old" field.
func GnpOldLTE(v float64) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGnpOld), v))
	})
}

// LocalNameEQ applies the EQ predicate on the "local_name" field.
func LocalNameEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocalName), v))
	})
}

// LocalNameNEQ applies the NEQ predicate on the "local_name" field.
func LocalNameNEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocalName), v))
	})
}

// LocalNameIn applies the In predicate on the "local_name" field.
func LocalNameIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocalName), v...))
	})
}

// LocalNameNotIn applies the NotIn predicate on the "local_name" field.
func LocalNameNotIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocalName), v...))
	})
}

// LocalNameGT applies the GT predicate on the "local_name" field.
func LocalNameGT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocalName), v))
	})
}

// LocalNameGTE applies the GTE predicate on the "local_name" field.
func LocalNameGTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocalName), v))
	})
}

// LocalNameLT applies the LT predicate on the "local_name" field.
func LocalNameLT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocalName), v))
	})
}

// LocalNameLTE applies the LTE predicate on the "local_name" field.
func LocalNameLTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocalName), v))
	})
}

// LocalNameContains applies the Contains predicate on the "local_name" field.
func LocalNameContains(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocalName), v))
	})
}

// LocalNameHasPrefix applies the HasPrefix predicate on the "local_name" field.
func LocalNameHasPrefix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocalName), v))
	})
}

// LocalNameHasSuffix applies the HasSuffix predicate on the "local_name" field.
func LocalNameHasSuffix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocalName), v))
	})
}

// LocalNameEqualFold applies the EqualFold predicate on the "local_name" field.
func LocalNameEqualFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocalName), v))
	})
}

// LocalNameContainsFold applies the ContainsFold predicate on the "local_name" field.
func LocalNameContainsFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocalName), v))
	})
}

// GovernmentFormEQ applies the EQ predicate on the "government_form" field.
func GovernmentFormEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGovernmentForm), v))
	})
}

// GovernmentFormNEQ applies the NEQ predicate on the "government_form" field.
func GovernmentFormNEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGovernmentForm), v))
	})
}

// GovernmentFormIn applies the In predicate on the "government_form" field.
func GovernmentFormIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGovernmentForm), v...))
	})
}

// GovernmentFormNotIn applies the NotIn predicate on the "government_form" field.
func GovernmentFormNotIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGovernmentForm), v...))
	})
}

// GovernmentFormGT applies the GT predicate on the "government_form" field.
func GovernmentFormGT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGovernmentForm), v))
	})
}

// GovernmentFormGTE applies the GTE predicate on the "government_form" field.
func GovernmentFormGTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGovernmentForm), v))
	})
}

// GovernmentFormLT applies the LT predicate on the "government_form" field.
func GovernmentFormLT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGovernmentForm), v))
	})
}

// GovernmentFormLTE applies the LTE predicate on the "government_form" field.
func GovernmentFormLTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGovernmentForm), v))
	})
}

// GovernmentFormContains applies the Contains predicate on the "government_form" field.
func GovernmentFormContains(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGovernmentForm), v))
	})
}

// GovernmentFormHasPrefix applies the HasPrefix predicate on the "government_form" field.
func GovernmentFormHasPrefix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGovernmentForm), v))
	})
}

// GovernmentFormHasSuffix applies the HasSuffix predicate on the "government_form" field.
func GovernmentFormHasSuffix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGovernmentForm), v))
	})
}

// GovernmentFormEqualFold applies the EqualFold predicate on the "government_form" field.
func GovernmentFormEqualFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGovernmentForm), v))
	})
}

// GovernmentFormContainsFold applies the ContainsFold predicate on the "government_form" field.
func GovernmentFormContainsFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGovernmentForm), v))
	})
}

// HeadOfStateEQ applies the EQ predicate on the "head_of_state" field.
func HeadOfStateEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeadOfState), v))
	})
}

// HeadOfStateNEQ applies the NEQ predicate on the "head_of_state" field.
func HeadOfStateNEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeadOfState), v))
	})
}

// HeadOfStateIn applies the In predicate on the "head_of_state" field.
func HeadOfStateIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHeadOfState), v...))
	})
}

// HeadOfStateNotIn applies the NotIn predicate on the "head_of_state" field.
func HeadOfStateNotIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHeadOfState), v...))
	})
}

// HeadOfStateGT applies the GT predicate on the "head_of_state" field.
func HeadOfStateGT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeadOfState), v))
	})
}

// HeadOfStateGTE applies the GTE predicate on the "head_of_state" field.
func HeadOfStateGTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeadOfState), v))
	})
}

// HeadOfStateLT applies the LT predicate on the "head_of_state" field.
func HeadOfStateLT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeadOfState), v))
	})
}

// HeadOfStateLTE applies the LTE predicate on the "head_of_state" field.
func HeadOfStateLTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeadOfState), v))
	})
}

// HeadOfStateContains applies the Contains predicate on the "head_of_state" field.
func HeadOfStateContains(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHeadOfState), v))
	})
}

// HeadOfStateHasPrefix applies the HasPrefix predicate on the "head_of_state" field.
func HeadOfStateHasPrefix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHeadOfState), v))
	})
}

// HeadOfStateHasSuffix applies the HasSuffix predicate on the "head_of_state" field.
func HeadOfStateHasSuffix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHeadOfState), v))
	})
}

// HeadOfStateIsNil applies the IsNil predicate on the "head_of_state" field.
func HeadOfStateIsNil() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHeadOfState)))
	})
}

// HeadOfStateNotNil applies the NotNil predicate on the "head_of_state" field.
func HeadOfStateNotNil() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHeadOfState)))
	})
}

// HeadOfStateEqualFold applies the EqualFold predicate on the "head_of_state" field.
func HeadOfStateEqualFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHeadOfState), v))
	})
}

// HeadOfStateContainsFold applies the ContainsFold predicate on the "head_of_state" field.
func HeadOfStateContainsFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHeadOfState), v))
	})
}

// Code2EQ applies the EQ predicate on the "code2" field.
func Code2EQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode2), v))
	})
}

// Code2NEQ applies the NEQ predicate on the "code2" field.
func Code2NEQ(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode2), v))
	})
}

// Code2In applies the In predicate on the "code2" field.
func Code2In(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode2), v...))
	})
}

// Code2NotIn applies the NotIn predicate on the "code2" field.
func Code2NotIn(vs ...string) predicate.Country {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Country(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode2), v...))
	})
}

// Code2GT applies the GT predicate on the "code2" field.
func Code2GT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode2), v))
	})
}

// Code2GTE applies the GTE predicate on the "code2" field.
func Code2GTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode2), v))
	})
}

// Code2LT applies the LT predicate on the "code2" field.
func Code2LT(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode2), v))
	})
}

// Code2LTE applies the LTE predicate on the "code2" field.
func Code2LTE(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode2), v))
	})
}

// Code2Contains applies the Contains predicate on the "code2" field.
func Code2Contains(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode2), v))
	})
}

// Code2HasPrefix applies the HasPrefix predicate on the "code2" field.
func Code2HasPrefix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode2), v))
	})
}

// Code2HasSuffix applies the HasSuffix predicate on the "code2" field.
func Code2HasSuffix(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode2), v))
	})
}

// Code2EqualFold applies the EqualFold predicate on the "code2" field.
func Code2EqualFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode2), v))
	})
}

// Code2ContainsFold applies the ContainsFold predicate on the "code2" field.
func Code2ContainsFold(v string) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode2), v))
	})
}

// HasCapital applies the HasEdge predicate on the "capital" edge.
func HasCapital() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CapitalTable, CityFieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CapitalTable, CapitalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCapitalWith applies the HasEdge predicate on the "capital" edge with a given conditions (other predicates).
func HasCapitalWith(preds ...predicate.City) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CapitalInverseTable, CityFieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CapitalTable, CapitalColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLanguage applies the HasEdge predicate on the "language" edge.
func HasLanguage() predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LanguageTable, Country_languageFieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLanguageWith applies the HasEdge predicate on the "language" edge with a given conditions (other predicates).
func HasLanguageWith(preds ...predicate.Country_language) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LanguageInverseTable, Country_languageFieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, LanguageTable, LanguageColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Country) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Country) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Country) predicate.Country {
	return predicate.Country(func(s *sql.Selector) {
		p(s.Not())
	})
}
