// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Faroukhamadi/northwind-api/ent/city"
	"github.com/Faroukhamadi/northwind-api/ent/country"
	"github.com/Faroukhamadi/northwind-api/ent/country_language"
)

// CountryCreate is the builder for creating a Country entity.
type CountryCreate struct {
	config
	mutation *CountryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CountryCreate) SetName(s string) *CountryCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetRegion sets the "region" field.
func (cc *CountryCreate) SetRegion(s string) *CountryCreate {
	cc.mutation.SetRegion(s)
	return cc
}

// SetSurfaceArea sets the "surface_area" field.
func (cc *CountryCreate) SetSurfaceArea(f float64) *CountryCreate {
	cc.mutation.SetSurfaceArea(f)
	return cc
}

// SetIndepYear sets the "indep_year" field.
func (cc *CountryCreate) SetIndepYear(i int16) *CountryCreate {
	cc.mutation.SetIndepYear(i)
	return cc
}

// SetPopulation sets the "population" field.
func (cc *CountryCreate) SetPopulation(i int) *CountryCreate {
	cc.mutation.SetPopulation(i)
	return cc
}

// SetLifeExpectancy sets the "life_expectancy" field.
func (cc *CountryCreate) SetLifeExpectancy(f float64) *CountryCreate {
	cc.mutation.SetLifeExpectancy(f)
	return cc
}

// SetGnp sets the "gnp" field.
func (cc *CountryCreate) SetGnp(f float64) *CountryCreate {
	cc.mutation.SetGnp(f)
	return cc
}

// SetGnpOld sets the "gnp_old" field.
func (cc *CountryCreate) SetGnpOld(f float64) *CountryCreate {
	cc.mutation.SetGnpOld(f)
	return cc
}

// SetLocalName sets the "local_name" field.
func (cc *CountryCreate) SetLocalName(s string) *CountryCreate {
	cc.mutation.SetLocalName(s)
	return cc
}

// SetGovernmentForm sets the "government_form" field.
func (cc *CountryCreate) SetGovernmentForm(s string) *CountryCreate {
	cc.mutation.SetGovernmentForm(s)
	return cc
}

// SetHeadOfState sets the "head_of_state" field.
func (cc *CountryCreate) SetHeadOfState(s string) *CountryCreate {
	cc.mutation.SetHeadOfState(s)
	return cc
}

// SetNillableHeadOfState sets the "head_of_state" field if the given value is not nil.
func (cc *CountryCreate) SetNillableHeadOfState(s *string) *CountryCreate {
	if s != nil {
		cc.SetHeadOfState(*s)
	}
	return cc
}

// SetCode2 sets the "code2" field.
func (cc *CountryCreate) SetCode2(s string) *CountryCreate {
	cc.mutation.SetCode2(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CountryCreate) SetID(s string) *CountryCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetCapitalID sets the "capital" edge to the City entity by ID.
func (cc *CountryCreate) SetCapitalID(id int) *CountryCreate {
	cc.mutation.SetCapitalID(id)
	return cc
}

// SetNillableCapitalID sets the "capital" edge to the City entity by ID if the given value is not nil.
func (cc *CountryCreate) SetNillableCapitalID(id *int) *CountryCreate {
	if id != nil {
		cc = cc.SetCapitalID(*id)
	}
	return cc
}

// SetCapital sets the "capital" edge to the City entity.
func (cc *CountryCreate) SetCapital(c *City) *CountryCreate {
	return cc.SetCapitalID(c.ID)
}

// SetLanguageID sets the "language" edge to the Country_language entity by ID.
func (cc *CountryCreate) SetLanguageID(id int) *CountryCreate {
	cc.mutation.SetLanguageID(id)
	return cc
}

// SetNillableLanguageID sets the "language" edge to the Country_language entity by ID if the given value is not nil.
func (cc *CountryCreate) SetNillableLanguageID(id *int) *CountryCreate {
	if id != nil {
		cc = cc.SetLanguageID(*id)
	}
	return cc
}

// SetLanguage sets the "language" edge to the Country_language entity.
func (cc *CountryCreate) SetLanguage(c *Country_language) *CountryCreate {
	return cc.SetLanguageID(c.ID)
}

// Mutation returns the CountryMutation object of the builder.
func (cc *CountryCreate) Mutation() *CountryMutation {
	return cc.mutation
}

// Save creates the Country in the database.
func (cc *CountryCreate) Save(ctx context.Context) (*Country, error) {
	var (
		err  error
		node *Country
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CountryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CountryCreate) SaveX(ctx context.Context) *Country {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CountryCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CountryCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CountryCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Country.name"`)}
	}
	if _, ok := cc.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "Country.region"`)}
	}
	if _, ok := cc.mutation.SurfaceArea(); !ok {
		return &ValidationError{Name: "surface_area", err: errors.New(`ent: missing required field "Country.surface_area"`)}
	}
	if _, ok := cc.mutation.IndepYear(); !ok {
		return &ValidationError{Name: "indep_year", err: errors.New(`ent: missing required field "Country.indep_year"`)}
	}
	if _, ok := cc.mutation.Population(); !ok {
		return &ValidationError{Name: "population", err: errors.New(`ent: missing required field "Country.population"`)}
	}
	if _, ok := cc.mutation.LifeExpectancy(); !ok {
		return &ValidationError{Name: "life_expectancy", err: errors.New(`ent: missing required field "Country.life_expectancy"`)}
	}
	if _, ok := cc.mutation.Gnp(); !ok {
		return &ValidationError{Name: "gnp", err: errors.New(`ent: missing required field "Country.gnp"`)}
	}
	if _, ok := cc.mutation.GnpOld(); !ok {
		return &ValidationError{Name: "gnp_old", err: errors.New(`ent: missing required field "Country.gnp_old"`)}
	}
	if _, ok := cc.mutation.LocalName(); !ok {
		return &ValidationError{Name: "local_name", err: errors.New(`ent: missing required field "Country.local_name"`)}
	}
	if _, ok := cc.mutation.GovernmentForm(); !ok {
		return &ValidationError{Name: "government_form", err: errors.New(`ent: missing required field "Country.government_form"`)}
	}
	if _, ok := cc.mutation.Code2(); !ok {
		return &ValidationError{Name: "code2", err: errors.New(`ent: missing required field "Country.code2"`)}
	}
	if v, ok := cc.mutation.Code2(); ok {
		if err := country.Code2Validator(v); err != nil {
			return &ValidationError{Name: "code2", err: fmt.Errorf(`ent: validator failed for field "Country.code2": %w`, err)}
		}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := country.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Country.id": %w`, err)}
		}
	}
	return nil
}

func (cc *CountryCreate) sqlSave(ctx context.Context) (*Country, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Country.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (cc *CountryCreate) createSpec() (*Country, *sqlgraph.CreateSpec) {
	var (
		_node = &Country{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: country.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: country.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.Region(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldRegion,
		})
		_node.Region = value
	}
	if value, ok := cc.mutation.SurfaceArea(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldSurfaceArea,
		})
		_node.SurfaceArea = value
	}
	if value, ok := cc.mutation.IndepYear(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: country.FieldIndepYear,
		})
		_node.IndepYear = value
	}
	if value, ok := cc.mutation.Population(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: country.FieldPopulation,
		})
		_node.Population = value
	}
	if value, ok := cc.mutation.LifeExpectancy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldLifeExpectancy,
		})
		_node.LifeExpectancy = value
	}
	if value, ok := cc.mutation.Gnp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldGnp,
		})
		_node.Gnp = value
	}
	if value, ok := cc.mutation.GnpOld(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country.FieldGnpOld,
		})
		_node.GnpOld = value
	}
	if value, ok := cc.mutation.LocalName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldLocalName,
		})
		_node.LocalName = value
	}
	if value, ok := cc.mutation.GovernmentForm(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldGovernmentForm,
		})
		_node.GovernmentForm = value
	}
	if value, ok := cc.mutation.HeadOfState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldHeadOfState,
		})
		_node.HeadOfState = &value
	}
	if value, ok := cc.mutation.Code2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country.FieldCode2,
		})
		_node.Code2 = value
	}
	if nodes := cc.mutation.CapitalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   country.CapitalTable,
			Columns: []string{country.CapitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   country.LanguageTable,
			Columns: []string{country.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country_language.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CountryCreateBulk is the builder for creating many Country entities in bulk.
type CountryCreateBulk struct {
	config
	builders []*CountryCreate
}

// Save creates the Country entities in the database.
func (ccb *CountryCreateBulk) Save(ctx context.Context) ([]*Country, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Country, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CountryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CountryCreateBulk) SaveX(ctx context.Context) []*Country {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CountryCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CountryCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
