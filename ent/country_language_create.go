// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Faroukhamadi/northwind-api/ent/country"
	"github.com/Faroukhamadi/northwind-api/ent/country_language"
)

// CountryLanguageCreate is the builder for creating a Country_language entity.
type CountryLanguageCreate struct {
	config
	mutation *CountryLanguageMutation
	hooks    []Hook
}

// SetCountryCode sets the "country_code" field.
func (clc *CountryLanguageCreate) SetCountryCode(s string) *CountryLanguageCreate {
	clc.mutation.SetCountryCode(s)
	return clc
}

// SetLanguage sets the "language" field.
func (clc *CountryLanguageCreate) SetLanguage(s string) *CountryLanguageCreate {
	clc.mutation.SetLanguage(s)
	return clc
}

// SetIsOfficial sets the "is_official" field.
func (clc *CountryLanguageCreate) SetIsOfficial(b bool) *CountryLanguageCreate {
	clc.mutation.SetIsOfficial(b)
	return clc
}

// SetPercentage sets the "percentage" field.
func (clc *CountryLanguageCreate) SetPercentage(f float64) *CountryLanguageCreate {
	clc.mutation.SetPercentage(f)
	return clc
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (clc *CountryLanguageCreate) SetCountryID(id string) *CountryLanguageCreate {
	clc.mutation.SetCountryID(id)
	return clc
}

// SetCountry sets the "country" edge to the Country entity.
func (clc *CountryLanguageCreate) SetCountry(c *Country) *CountryLanguageCreate {
	return clc.SetCountryID(c.ID)
}

// Mutation returns the CountryLanguageMutation object of the builder.
func (clc *CountryLanguageCreate) Mutation() *CountryLanguageMutation {
	return clc.mutation
}

// Save creates the Country_language in the database.
func (clc *CountryLanguageCreate) Save(ctx context.Context) (*Country_language, error) {
	var (
		err  error
		node *Country_language
	)
	if len(clc.hooks) == 0 {
		if err = clc.check(); err != nil {
			return nil, err
		}
		node, err = clc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CountryLanguageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = clc.check(); err != nil {
				return nil, err
			}
			clc.mutation = mutation
			if node, err = clc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(clc.hooks) - 1; i >= 0; i-- {
			if clc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = clc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, clc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CountryLanguageCreate) SaveX(ctx context.Context) *Country_language {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CountryLanguageCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CountryLanguageCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CountryLanguageCreate) check() error {
	if _, ok := clc.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "country_code", err: errors.New(`ent: missing required field "Country_language.country_code"`)}
	}
	if _, ok := clc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Country_language.language"`)}
	}
	if _, ok := clc.mutation.IsOfficial(); !ok {
		return &ValidationError{Name: "is_official", err: errors.New(`ent: missing required field "Country_language.is_official"`)}
	}
	if _, ok := clc.mutation.Percentage(); !ok {
		return &ValidationError{Name: "percentage", err: errors.New(`ent: missing required field "Country_language.percentage"`)}
	}
	if _, ok := clc.mutation.CountryID(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required edge "Country_language.country"`)}
	}
	return nil
}

func (clc *CountryLanguageCreate) sqlSave(ctx context.Context) (*Country_language, error) {
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (clc *CountryLanguageCreate) createSpec() (*Country_language, *sqlgraph.CreateSpec) {
	var (
		_node = &Country_language{config: clc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: country_language.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: country_language.FieldID,
			},
		}
	)
	if value, ok := clc.mutation.CountryCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country_language.FieldCountryCode,
		})
		_node.CountryCode = value
	}
	if value, ok := clc.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: country_language.FieldLanguage,
		})
		_node.Language = value
	}
	if value, ok := clc.mutation.IsOfficial(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: country_language.FieldIsOfficial,
		})
		_node.IsOfficial = value
	}
	if value, ok := clc.mutation.Percentage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: country_language.FieldPercentage,
		})
		_node.Percentage = value
	}
	if nodes := clc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   country_language.CountryTable,
			Columns: []string{country_language.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.country_language = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CountryLanguageCreateBulk is the builder for creating many Country_language entities in bulk.
type CountryLanguageCreateBulk struct {
	config
	builders []*CountryLanguageCreate
}

// Save creates the Country_language entities in the database.
func (clcb *CountryLanguageCreateBulk) Save(ctx context.Context) ([]*Country_language, error) {
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*Country_language, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CountryLanguageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CountryLanguageCreateBulk) SaveX(ctx context.Context) []*Country_language {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CountryLanguageCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CountryLanguageCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
